$ gradle model

> Task :model

------------------------------------------------------------
Root project
------------------------------------------------------------

+ binaries
      | Type:   	org.gradle.platform.base.BinaryContainer
      | Creator: 	BinaryBasePlugin.Rules#binaries(BinaryContainer)
      | Rules:
         ? JavaBasePluginRules.Rules#attachBridgedBinaries(BinaryContainer, JavaBasePluginRules.BridgedBinaries)
    + main
          | Type:   	org.gradle.api.internal.jvm.DefaultClassDirectoryBinarySpec_Decorated
          | Value:  	Classes 'main'
          | Creator: 	JavaBasePluginRules.Rules#attachBridgedBinaries(BinaryContainer, JavaBasePluginRules.BridgedBinaries) > put()
          | Rules:
             ? BinaryBasePlugin.Rules#defineBuildLifecycleTask(BinarySpecInternal, NamedEntityInstantiator<Task>)
             ? BinaryBasePlugin.Rules#addSourceSetsOwnedByBinariesToTheirInputs(BinarySpecInternal)
    + test
          | Type:   	org.gradle.api.internal.jvm.DefaultClassDirectoryBinarySpec_Decorated
          | Value:  	Classes 'test'
          | Creator: 	JavaBasePluginRules.Rules#attachBridgedBinaries(BinaryContainer, JavaBasePluginRules.BridgedBinaries) > put()
          | Rules:
             ? BinaryBasePlugin.Rules#defineBuildLifecycleTask(BinarySpecInternal, NamedEntityInstantiator<Task>)
             ? BinaryBasePlugin.Rules#addSourceSetsOwnedByBinariesToTheirInputs(BinarySpecInternal)
+ components
      | Type:   	org.gradle.platform.base.ComponentSpecContainer
      | Creator: 	ComponentBasePlugin.PluginRules#components(ComponentSpecContainer)
+ sources
      | Type:   	org.gradle.language.base.ProjectSourceSet
      | Value:  	[Java source 'main:java', JVM resources 'main:resources', Java source 'test:java', JVM resources 'test:resources']
      | Creator: 	LanguageBasePlugin.Rules#sources(Instantiator, CollectionCallbackActionDecorator)
      | Rules:
         ? JavaBasePluginRules.Rules#attachBridgedSourceSets(ProjectSourceSet, JavaBasePluginRules.BridgedBinaries)
+ tasks
      | Type:   	org.gradle.model.ModelMap<org.gradle.api.Task>
      | Creator: 	Project.<init>.tasks()
      | Rules:
         ? BinaryBasePlugin.Rules#copyBinaryTasksToTaskContainer(TaskContainer, BinaryContainer)
    + assemble
          | Type:   	org.gradle.api.DefaultTask
          | Value:  	task ':assemble'
          | Creator: 	Project.<init>.tasks.assemble()
          | Rules:
             ? copyToTaskContainer
    + assembleDist
          | Type:   	org.gradle.api.DefaultTask
          | Value:  	task ':assembleDist'
          | Creator: 	Project.<init>.tasks.assembleDist()
          | Rules:
             ? copyToTaskContainer
    + build
          | Type:   	org.gradle.api.DefaultTask
          | Value:  	task ':build'
          | Creator: 	Project.<init>.tasks.build()
          | Rules:
             ? copyToTaskContainer
    + buildDependents
          | Type:   	org.gradle.api.DefaultTask
          | Value:  	task ':buildDependents'
          | Creator: 	Project.<init>.tasks.buildDependents()
          | Rules:
             ? copyToTaskContainer
    + buildEnvironment
          | Type:   	org.gradle.api.tasks.diagnostics.BuildEnvironmentReportTask
          | Value:  	task ':buildEnvironment'
          | Creator: 	Project.<init>.tasks.buildEnvironment()
          | Rules:
             ? copyToTaskContainer
    + buildNeeded
          | Type:   	org.gradle.api.DefaultTask
          | Value:  	task ':buildNeeded'
          | Creator: 	Project.<init>.tasks.buildNeeded()
          | Rules:
             ? copyToTaskContainer
    + check
          | Type:   	org.gradle.api.DefaultTask
          | Value:  	task ':check'
          | Creator: 	Project.<init>.tasks.check()
          | Rules:
             ? copyToTaskContainer
    + classes
          | Type:   	org.gradle.api.DefaultTask
          | Value:  	task ':classes'
          | Creator: 	Project.<init>.tasks.classes()
          | Rules:
             ? copyToTaskContainer
    + clean
          | Type:   	org.gradle.api.tasks.Delete
          | Value:  	task ':clean'
          | Creator: 	Project.<init>.tasks.clean()
          | Rules:
             ? copyToTaskContainer
    + compileJava
          | Type:   	org.gradle.api.tasks.compile.JavaCompile
          | Value:  	task ':compileJava'
          | Creator: 	Project.<init>.tasks.compileJava()
          | Rules:
             ? copyToTaskContainer
    + compileTestJava
          | Type:   	org.gradle.api.tasks.compile.JavaCompile
          | Value:  	task ':compileTestJava'
          | Creator: 	Project.<init>.tasks.compileTestJava()
          | Rules:
             ? copyToTaskContainer
    + components
          | Type:   	org.gradle.api.reporting.components.ComponentReport
          | Value:  	task ':components'
          | Creator: 	Project.<init>.tasks.components()
          | Rules:
             ? copyToTaskContainer
    + dependencies
          | Type:   	org.gradle.api.tasks.diagnostics.DependencyReportTask
          | Value:  	task ':dependencies'
          | Creator: 	Project.<init>.tasks.dependencies()
          | Rules:
             ? copyToTaskContainer
    + dependencyInsight
          | Type:   	org.gradle.api.tasks.diagnostics.DependencyInsightReportTask
          | Value:  	task ':dependencyInsight'
          | Creator: 	Project.<init>.tasks.dependencyInsight()
          | Rules:
             ? copyToTaskContainer
    + dependentComponents
          | Type:   	org.gradle.api.reporting.dependents.DependentComponentsReport
          | Value:  	task ':dependentComponents'
          | Creator: 	Project.<init>.tasks.dependentComponents()
          | Rules:
             ? copyToTaskContainer
    + distTar
          | Type:   	org.gradle.api.tasks.bundling.Tar
          | Value:  	task ':distTar'
          | Creator: 	Project.<init>.tasks.distTar()
          | Rules:
             ? copyToTaskContainer
    + distZip
          | Type:   	org.gradle.api.tasks.bundling.Zip
          | Value:  	task ':distZip'
          | Creator: 	Project.<init>.tasks.distZip()
          | Rules:
             ? copyToTaskContainer
    + help
          | Type:   	org.gradle.configuration.Help
          | Value:  	task ':help'
          | Creator: 	Project.<init>.tasks.help()
          | Rules:
             ? copyToTaskContainer
    + init
          | Type:   	org.gradle.buildinit.tasks.InitBuild
          | Value:  	task ':init'
          | Creator: 	Project.<init>.tasks.init()
          | Rules:
             ? copyToTaskContainer
    + installDist
          | Type:   	org.gradle.api.tasks.Sync
          | Value:  	task ':installDist'
          | Creator: 	Project.<init>.tasks.installDist()
          | Rules:
             ? copyToTaskContainer
    + jar
          | Type:   	org.gradle.api.tasks.bundling.Jar
          | Value:  	task ':jar'
          | Creator: 	Project.<init>.tasks.jar()
          | Rules:
             ? copyToTaskContainer
    + javadoc
          | Type:   	org.gradle.api.tasks.javadoc.Javadoc
          | Value:  	task ':javadoc'
          | Creator: 	Project.<init>.tasks.javadoc()
          | Rules:
             ? copyToTaskContainer
    + model
          | Type:   	org.gradle.api.reporting.model.ModelReport
          | Value:  	task ':model'
          | Creator: 	Project.<init>.tasks.model()
          | Rules:
             ? copyToTaskContainer
    + outgoingVariants
          | Type:   	org.gradle.api.tasks.diagnostics.OutgoingVariantsReportTask
          | Value:  	task ':outgoingVariants'
          | Creator: 	Project.<init>.tasks.outgoingVariants()
          | Rules:
             ? copyToTaskContainer
    + prepareKotlinBuildScriptModel
          | Type:   	org.gradle.api.DefaultTask
          | Value:  	task ':prepareKotlinBuildScriptModel'
          | Creator: 	Project.<init>.tasks.prepareKotlinBuildScriptModel()
          | Rules:
             ? copyToTaskContainer
    + processResources
          | Type:   	org.gradle.language.jvm.tasks.ProcessResources
          | Value:  	task ':processResources'
          | Creator: 	Project.<init>.tasks.processResources()
          | Rules:
             ? copyToTaskContainer
    + processTestResources
          | Type:   	org.gradle.language.jvm.tasks.ProcessResources
          | Value:  	task ':processTestResources'
          | Creator: 	Project.<init>.tasks.processTestResources()
          | Rules:
             ? copyToTaskContainer
    + projects
          | Type:   	org.gradle.api.tasks.diagnostics.ProjectReportTask
          | Value:  	task ':projects'
          | Creator: 	Project.<init>.tasks.projects()
          | Rules:
             ? copyToTaskContainer
    + properties
          | Type:   	org.gradle.api.tasks.diagnostics.PropertyReportTask
          | Value:  	task ':properties'
          | Creator: 	Project.<init>.tasks.properties()
          | Rules:
             ? copyToTaskContainer
    + run
          | Type:   	org.gradle.api.tasks.JavaExec
          | Value:  	task ':run'
          | Creator: 	Project.<init>.tasks.run()
          | Rules:
             ? copyToTaskContainer
    + startScripts
          | Type:   	org.gradle.api.tasks.application.CreateStartScripts
          | Value:  	task ':startScripts'
          | Creator: 	Project.<init>.tasks.startScripts()
          | Rules:
             ? copyToTaskContainer
    + tasks
          | Type:   	org.gradle.api.tasks.diagnostics.TaskReportTask
          | Value:  	task ':tasks'
          | Creator: 	Project.<init>.tasks.tasks()
          | Rules:
             ? copyToTaskContainer
    + test
          | Type:   	org.gradle.api.tasks.testing.Test
          | Value:  	task ':test'
          | Creator: 	Project.<init>.tasks.test()
          | Rules:
             ? copyToTaskContainer
    + testClasses
          | Type:   	org.gradle.api.DefaultTask
          | Value:  	task ':testClasses'
          | Creator: 	Project.<init>.tasks.testClasses()
          | Rules:
             ? copyToTaskContainer
    + wrapper
          | Type:   	org.gradle.api.tasks.wrapper.Wrapper
          | Value:  	task ':wrapper'
          | Creator: 	Project.<init>.tasks.wrapper()
          | Rules:
             ? copyToTaskContainer

BUILD SUCCESSFUL in 1s
1 actionable task: 1 executed
